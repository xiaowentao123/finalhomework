/// <reference types="react" />
import { HoverProps } from '@react-aria/interactions';
export declare const useHover: (props?: HoverProps, ref?: any) => {
    hoverProps: {
        onHoverIn: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onHoverOut: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        id?: string;
        role?: import("react").AriaRole;
        tabIndex?: number;
        style?: import("react").CSSProperties;
        className?: string;
        "aria-activedescendant"?: string;
        "aria-atomic"?: boolean | "true" | "false";
        "aria-autocomplete"?: "list" | "none" | "inline" | "both";
        "aria-braillelabel"?: string;
        "aria-brailleroledescription"?: string;
        "aria-busy"?: boolean | "true" | "false";
        "aria-checked"?: boolean | "true" | "false" | "mixed";
        "aria-colcount"?: number;
        "aria-colindex"?: number;
        "aria-colindextext"?: string;
        "aria-colspan"?: number;
        "aria-controls"?: string;
        "aria-current"?: boolean | "location" | "true" | "false" | "page" | "step" | "date" | "time";
        "aria-describedby"?: string;
        "aria-description"?: string;
        "aria-details"?: string;
        "aria-disabled"?: boolean | "true" | "false";
        "aria-dropeffect"?: "copy" | "link" | "none" | "execute" | "move" | "popup";
        "aria-errormessage"?: string;
        "aria-expanded"?: boolean | "true" | "false";
        "aria-flowto"?: string;
        "aria-grabbed"?: boolean | "true" | "false";
        "aria-haspopup"?: boolean | "dialog" | "grid" | "listbox" | "menu" | "tree" | "true" | "false";
        "aria-hidden"?: boolean | "true" | "false";
        "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
        "aria-keyshortcuts"?: string;
        "aria-label"?: string;
        "aria-labelledby"?: string;
        "aria-level"?: number;
        "aria-live"?: "off" | "assertive" | "polite";
        "aria-modal"?: boolean | "true" | "false";
        "aria-multiline"?: boolean | "true" | "false";
        "aria-multiselectable"?: boolean | "true" | "false";
        "aria-orientation"?: "horizontal" | "vertical";
        "aria-owns"?: string;
        "aria-placeholder"?: string;
        "aria-posinset"?: number;
        "aria-pressed"?: boolean | "true" | "false" | "mixed";
        "aria-readonly"?: boolean | "true" | "false";
        "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals";
        "aria-required"?: boolean | "true" | "false";
        "aria-roledescription"?: string;
        "aria-rowcount"?: number;
        "aria-rowindex"?: number;
        "aria-rowindextext"?: string;
        "aria-rowspan"?: number;
        "aria-selected"?: boolean | "true" | "false";
        "aria-setsize"?: number;
        "aria-sort"?: "none" | "ascending" | "descending" | "other";
        "aria-valuemax"?: number;
        "aria-valuemin"?: number;
        "aria-valuenow"?: number;
        "aria-valuetext"?: string;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        };
        onCopy?: import("react").ClipboardEventHandler<import("@react-types/shared").FocusableElement>;
        onCopyCapture?: import("react").ClipboardEventHandler<import("@react-types/shared").FocusableElement>;
        onCut?: import("react").ClipboardEventHandler<import("@react-types/shared").FocusableElement>;
        onCutCapture?: import("react").ClipboardEventHandler<import("@react-types/shared").FocusableElement>;
        onPaste?: import("react").ClipboardEventHandler<import("@react-types/shared").FocusableElement>;
        onPasteCapture?: import("react").ClipboardEventHandler<import("@react-types/shared").FocusableElement>;
        onCompositionEnd?: import("react").CompositionEventHandler<import("@react-types/shared").FocusableElement>;
        onCompositionEndCapture?: import("react").CompositionEventHandler<import("@react-types/shared").FocusableElement>;
        onCompositionStart?: import("react").CompositionEventHandler<import("@react-types/shared").FocusableElement>;
        onCompositionStartCapture?: import("react").CompositionEventHandler<import("@react-types/shared").FocusableElement>;
        onCompositionUpdate?: import("react").CompositionEventHandler<import("@react-types/shared").FocusableElement>;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<import("@react-types/shared").FocusableElement>;
        onFocus?: import("react").FocusEventHandler<import("@react-types/shared").FocusableElement>;
        onFocusCapture?: import("react").FocusEventHandler<import("@react-types/shared").FocusableElement>;
        onBlur?: import("react").FocusEventHandler<import("@react-types/shared").FocusableElement>;
        onBlurCapture?: import("react").FocusEventHandler<import("@react-types/shared").FocusableElement>;
        onChange?: import("react").FormEventHandler<import("@react-types/shared").FocusableElement>;
        onChangeCapture?: import("react").FormEventHandler<import("@react-types/shared").FocusableElement>;
        onBeforeInput?: import("react").FormEventHandler<import("@react-types/shared").FocusableElement>;
        onBeforeInputCapture?: import("react").FormEventHandler<import("@react-types/shared").FocusableElement>;
        onInput?: import("react").FormEventHandler<import("@react-types/shared").FocusableElement>;
        onInputCapture?: import("react").FormEventHandler<import("@react-types/shared").FocusableElement>;
        onReset?: import("react").FormEventHandler<import("@react-types/shared").FocusableElement>;
        onResetCapture?: import("react").FormEventHandler<import("@react-types/shared").FocusableElement>;
        onSubmit?: import("react").FormEventHandler<import("@react-types/shared").FocusableElement>;
        onSubmitCapture?: import("react").FormEventHandler<import("@react-types/shared").FocusableElement>;
        onInvalid?: import("react").FormEventHandler<import("@react-types/shared").FocusableElement>;
        onInvalidCapture?: import("react").FormEventHandler<import("@react-types/shared").FocusableElement>;
        onLoad?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onLoadCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onError?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onErrorCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onKeyDown?: import("react").KeyboardEventHandler<import("@react-types/shared").FocusableElement>;
        onKeyDownCapture?: import("react").KeyboardEventHandler<import("@react-types/shared").FocusableElement>;
        onKeyPress?: import("react").KeyboardEventHandler<import("@react-types/shared").FocusableElement>;
        onKeyPressCapture?: import("react").KeyboardEventHandler<import("@react-types/shared").FocusableElement>;
        onKeyUp?: import("react").KeyboardEventHandler<import("@react-types/shared").FocusableElement>;
        onKeyUpCapture?: import("react").KeyboardEventHandler<import("@react-types/shared").FocusableElement>;
        onAbort?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onAbortCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onCanPlay?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onCanPlayCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onCanPlayThrough?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onDurationChange?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onDurationChangeCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onEmptied?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onEmptiedCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onEncrypted?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onEncryptedCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onEnded?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onEndedCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onLoadedData?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onLoadedDataCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onLoadedMetadata?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onLoadStart?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onLoadStartCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onPause?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onPauseCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onPlay?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onPlayCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onPlaying?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onPlayingCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onProgress?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onProgressCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onRateChange?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onRateChangeCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onResize?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onResizeCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onSeeked?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onSeekedCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onSeeking?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onSeekingCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onStalled?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onStalledCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onSuspend?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onSuspendCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onTimeUpdate?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onTimeUpdateCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onVolumeChange?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onVolumeChangeCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onWaiting?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onWaitingCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onAuxClick?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onAuxClickCapture?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onClick?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onClickCapture?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onContextMenu?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onContextMenuCapture?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onDoubleClick?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onDoubleClickCapture?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onDrag?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDragCapture?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDragEnd?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDragEndCapture?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDragEnter?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDragEnterCapture?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDragExit?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDragExitCapture?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDragLeave?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDragLeaveCapture?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDragOver?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDragOverCapture?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDragStart?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDragStartCapture?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDrop?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onDropCapture?: import("react").DragEventHandler<import("@react-types/shared").FocusableElement>;
        onMouseDown?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onMouseDownCapture?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onMouseEnter?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onMouseLeave?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onMouseMove?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onMouseMoveCapture?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onMouseOut?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onMouseOutCapture?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onMouseOver?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onMouseOverCapture?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onMouseUp?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onMouseUpCapture?: import("react").MouseEventHandler<import("@react-types/shared").FocusableElement>;
        onSelect?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onSelectCapture?: import("react").ReactEventHandler<import("@react-types/shared").FocusableElement>;
        onTouchCancel?: import("react").TouchEventHandler<import("@react-types/shared").FocusableElement>;
        onTouchCancelCapture?: import("react").TouchEventHandler<import("@react-types/shared").FocusableElement>;
        onTouchEnd?: import("react").TouchEventHandler<import("@react-types/shared").FocusableElement>;
        onTouchEndCapture?: import("react").TouchEventHandler<import("@react-types/shared").FocusableElement>;
        onTouchMove?: import("react").TouchEventHandler<import("@react-types/shared").FocusableElement>;
        onTouchMoveCapture?: import("react").TouchEventHandler<import("@react-types/shared").FocusableElement>;
        onTouchStart?: import("react").TouchEventHandler<import("@react-types/shared").FocusableElement>;
        onTouchStartCapture?: import("react").TouchEventHandler<import("@react-types/shared").FocusableElement>;
        onPointerDown?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onPointerDownCapture?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onPointerMove?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onPointerMoveCapture?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onPointerUp?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onPointerUpCapture?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onPointerCancel?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onPointerCancelCapture?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onPointerEnter?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onPointerLeave?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onPointerOver?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onPointerOverCapture?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onPointerOut?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onPointerOutCapture?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onGotPointerCapture?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onLostPointerCapture?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<import("@react-types/shared").FocusableElement>;
        onScroll?: import("react").UIEventHandler<import("@react-types/shared").FocusableElement>;
        onScrollCapture?: import("react").UIEventHandler<import("@react-types/shared").FocusableElement>;
        onWheel?: import("react").WheelEventHandler<import("@react-types/shared").FocusableElement>;
        onWheelCapture?: import("react").WheelEventHandler<import("@react-types/shared").FocusableElement>;
        onAnimationStart?: import("react").AnimationEventHandler<import("@react-types/shared").FocusableElement>;
        onAnimationStartCapture?: import("react").AnimationEventHandler<import("@react-types/shared").FocusableElement>;
        onAnimationEnd?: import("react").AnimationEventHandler<import("@react-types/shared").FocusableElement>;
        onAnimationEndCapture?: import("react").AnimationEventHandler<import("@react-types/shared").FocusableElement>;
        onAnimationIteration?: import("react").AnimationEventHandler<import("@react-types/shared").FocusableElement>;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<import("@react-types/shared").FocusableElement>;
        onTransitionEnd?: import("react").TransitionEventHandler<import("@react-types/shared").FocusableElement>;
        onTransitionEndCapture?: import("react").TransitionEventHandler<import("@react-types/shared").FocusableElement>;
    };
    isHovered: boolean;
};
//# sourceMappingURL=useHover.web.d.ts.map